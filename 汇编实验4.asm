;这道题我完全不会哈哈哈
DATAS SEGMENT
	;此处输入数据段代码 
	STRING1 DB 20 DUP(?)
	STRING2 DB 20 DUP(?)
	sum db 21 dup(0)
	COUN3 DW 0
	S DW 1 DUP(?)
	D DW 1 DUP(?)
	FLAG DW 1 DUP(0)
	MES DB 'INPUT ERROR$'
	result1 db "SUM:$"
	result2 db "DIFFERENCE:$" 
DATAS ENDS

STACKS SEGMENT
	dw 100 dup(?)
	tos label word;
	;此处输入堆栈段代码
STACKS ENDS

CODES SEGMENT

	ASSUME CS:CODES,DS:DATAS,SS:STACKS
START:
	MOV AX,DATAS
	MOV DS,AX
	MOV SI,0
	MOV DI,0
	MOV AX,STACKS
	MOV SS,AX
	LEA SP,OFFSET TOS
	;此处输入代码段代码
	INPUT1:MOV AH,01
	INT 21H
	CMP AL,'0'
	JL WRONG1
	CMP AL,'9'
	JNG NEXT
	CMP AL,'A'
	JL WRONG1
	CMP AL,'F'
	JNG NEXT
	CMP AL,'a'
	JL WRONG1
	CMP AL,'f'
	JG WRONG1
	NEXT:
	CMP AL,'F'
	JNG LL
	SUB AL,'a'
	ADD AL,'A'
	LL:
	MOV STRING1[SI],AL
	INC SI
	LOOP INPUT1
	INPUT2:MOV FLAG,1
	MOV AH,01
	INT 21H
	CMP AL,'0'
	JL WRONG2
	CMP AL,'9'
	JNG NEXT1
	CMP AL,'A'
	JL WRONG2
	CMP AL,'F'
	JNG NEXT1
	CMP AL,'a'
	JL WRONG2
	CMP AL,'f'
	JG WRONG2
	NEXT1:
	CMP AL,'F'
	JNG LLLL
	SUB AL,'a'
	ADD AL,'A'
	LLLL:
	MOV STRING2[DI],AL
	INC DI
	LOOP INPUT2
	LLL:
	MOV S,SI
	MOV D,DI
   
	MOV BX,OFFSET S
	PUSH BX
	MOV BX,OFFSET STRING1
	PUSH BX
	MOV BX,OFFSET D
	PUSH BX 
	MOV BX,OFFSET STRING2
	PUSH BX
	MOV BX,OFFSET sum
	PUSH BX
	CALL NEAR PTR ADDFUN
	
	MOV BX,OFFSET S
	PUSH BX
	MOV BX,OFFSET STRING1
	PUSH BX
	MOV BX,OFFSET D
	PUSH BX 
	MOV BX,OFFSET STRING2
	PUSH BX
	MOV BX,OFFSET sum
	PUSH BX
	CALL NEAR PTR SUBFUN
	JMP CTN
	
	WRONG1:CMP SI,0
	JNZ INPUT2
	JMP WRONG
	WRONG2:CMP DI,0
	JZ WRONG
	CMP FLAG,1
	JZ LLL
	JMP CTN
	WRONG:
	LEA DX,MES
	MOV AH,09
	INT 21H
	CTN:
	MOV AH,4CH
	INT 21H
	
	SUBFUN PROC NEAR
	PUSH BP
	MOV BP,SP
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI
	MOV BX,[BP + 4]
	MOV AL,0
	MOV [BX],AL
	MOV SI,[BP + 12]
	MOV DI,[BP + 8]
	MOV AX,[SI]
	CMP AX,[DI]
	JB SWAPBEFORE
	MOV CX,AX
	MOV COUN3,CX
	JA INIT
	JMP NEXT11
SWAPBEFORE:
	MOV CX,[DI]
	MOV COUN3,CX
	JMP SWAP
NEXT11:
	MOV SI,[BP + 10]
	MOV DI,[BP + 6]
CON1:
	MOV AX,[SI]
	CMP AX,[DI]
	JB SWAP
	JA INIT
	INC SI
	INC DI
	LOOP CON1
	JMP INIT
SWAP:
	MOV AH,02H
	MOV DL,'-'
	INT 21H
	MOV AX,[BP + 12]
	MOV DX,[BP + 8]
	MOV [BP + 12],DX
	MOV [BP + 8],AX
	MOV AX,[BP + 10]
	MOV DX,[BP + 6]
	MOV [BP + 10],DX
	MOV [BP + 6],AX
INIT:
	MOV SI,[BP + 12]
	MOV AX,[SI]
	MOV SI,[BP + 10]
	ADD SI,AX
	MOV DI,[BP + 8]
	MOV AX,[DI]
	MOV DI,[BP + 6]
	ADD DI,AX
	MOV CX,COUN3
CONTRL2: 
	CMP SI,[BP + 10]
	JZ SET11
	DEC SI
	MOV AH,[SI]
	JMP NEXT12
SET11:
	MOV AH,'0'
NEXT12:
	CMP DI,[BP + 6]
	JZ SET12
	DEC DI
	MOV AL,[DI]
	JMP NEXT13
SET12:
	MOV AL,'0'
NEXT13:
	CMP AH,'9'
	JBE NEXT14
	SUB AH,7
NEXT14:
	CMP AL,'9'
	JBE NEXT15
	SUB AL,7
NEXT15:
	MOV DL,0
	MOV [BX + 1],DL
	ADD AL,[BX]
	CMP AH,AL
	JAE SUBHL
	MOV DL,1
	MOV [BX + 1],DL
	ADD AH,16
SUBHL:
	SUB AH,AL	
	ADD AH,'0'
	CMP AH,'9'
	JBE NEXT17
	ADD AH,7
NEXT17:
	MOV [BX],AH	
	INC BX
	LOOP CONTRL2
ZORE:
	DEC BX
	MOV AX,[BX]
	CMP AX,'0'
	JNZ OUT22
	CMP BX,[BP + 4]
	JNZ ZORE
	OUT22:
	MOV AH,09
	LEA DX,result2
	INT 21H
OUT2:
	MOV AH,02H
	MOV DL,[BX]
	INT 21H
	DEC BX
	CMP BX,[BP + 4]
	JAE OUT2
	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
	POP BP
	RET 10
SUBFUN ENDP

ADDFUN PROC NEAR
	PUSH BP
	MOV BP,SP
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI
	MOV SI,[BP + 12]
	MOV AX,[SI]
	MOV DI,[BP + 8]
	CMP [DI],AX
	JA SETCX1
	MOV CX,AX
	JMP NEXT111
SETCX1:
	MOV CX,[DI]
NEXT111:
	MOV SI,[BP + 10]
	ADD SI,AX
	MOV AX,[DI]
	MOV DI,[BP + 6]
	ADD DI,AX
	MOV BX,[BP + 4]
	
CONTRL1: 
	CMP SI,[BP + 10]
	JZ SET1
	DEC SI
	MOV AH,[SI]
	JMP NEXT2
SET1:
	MOV AH,'0'
NEXT2:
	CMP DI,[BP + 6]
	JZ SET2
	DEC DI
	MOV AL,[DI]
	JMP NEXT3
SET2:
	MOV AL,'0'
NEXT3:
	CMP AH,'9'
	JBE NEXT4
	SUB AH,7
NEXT4:
	CMP AL,'9'
	JBE NEXT5
	SUB AL,7
NEXT5:
	ADD AH,AL
	ADD AH,[BX]
	SUB AH,'0'
	MOV AL,0
	MOV [BX + 1],AL
	CMP AH,'9' + 7
	JB NEXT6
	SUB AH,16
	MOV AL,1
	MOV [BX + 1],AL
NEXT6:
	CMP AH,'9'
	JBE NEXT7
	ADD AH,7
NEXT7:
	MOV [BX],AH
	INC BX
	LOOP CONTRL1
	MOV AL,0
	CMP [BX],AL
	JZ NEXT8
	MOV AL,'0'
	ADD [BX],AL
	JMP OUT11
NEXT8:
	DEC BX
	OUT11:
	MOV AH,09
	LEA DX,result1
	INT 21H
OUT1:
	MOV AH,02H
	MOV DL,[BX]
	INT 21H
	DEC BX
	CMP BX,[BP + 4]
	JAE OUT1
	MOV AH,02H
	MOV DL,0AH
	INT 21H
	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
	POP BP
	RET 10
ADDFUN ENDP

CODES ENDS
 END START



